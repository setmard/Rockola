    @model List<Google.Apis.YouTube.v3.Data.SearchResult>

@try
{
    foreach (var item in Model)
    {

    <div class="row" >
        <div class="col-6" >
            <a href="javascript:void(0);">
                <img width="150" height="100" src="http://img.youtube.com/vi/@item.Id.VideoId/mqdefault.jpg" alt="@item.Snippet.Title" />
            </a>
        </div>

        <div class="col-6">
            <p> <strong>@item.Snippet.Title</strong></p>

            <button type="button" onclick="player.destroy();onYouTubeIframeAPIReady('@item.Id.VideoId')" class="btn btn-success">Play</button>

            <button type="button" onclick="addToPlaylist('@item.Id.VideoId', '@item.Snippet.Thumbnails.Default__.Url');" class="btn btn-success">Add</button>
        </div>
    </div>
    <br />



    }
}
catch (System.Exception Z) { }


<script>
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    var playListContainer;
    var band = false;
    var videoStopped = false;
    function onYouTubeIframeAPIReady(VideoId) {
        if (VideoId == null || VideoId == "") {
            VideoId = "QtXby3twMmI"
        }
        player = new YT.Player('player', {
            height: '360',
            width: '640',
            videoId: VideoId,
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });
        AddVideo(VideoId);
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
        event.target.playVideo();
    }


     function AddVideo(videoId) {
        $.ajax({
            url: '@Url.Action("AddVideoId")?idVideo=' + videoId,
            type: "POST",
            success: function (result) {
                console.log("",result);
            }
        });
    }
    

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
            setTimeout(stopVideo, 6000);
            done = true;
        }
    }
    function stopVideo() {
        player.stopVideo();
    }


    
</script>


